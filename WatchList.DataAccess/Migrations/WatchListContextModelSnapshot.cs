// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WatchList.DataAccess.Context;

#nullable disable

namespace WatchList.DataAccess.Migrations
{
    [DbContext(typeof(WatchListContext))]
    partial class WatchListContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WatchList.Entity.Entites.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LikedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MovieListId")
                        .HasColumnType("int");

                    b.Property<int?>("SeriesListId")
                        .HasColumnType("int");

                    b.Property<int>("TargetId")
                        .HasColumnType("int");

                    b.Property<string>("TargetType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TierListId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieListId");

                    b.HasIndex("SeriesListId");

                    b.HasIndex("TierListId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("WatchList.Entity.Entites.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPlannedToWatch")
                        .HasColumnType("bit");

                    b.Property<string>("PosterUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("WatchedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("WatchList.Entity.Entites.MovieList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsShared")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MovieLists");
                });

            modelBuilder.Entity("WatchList.Entity.Entites.MovieListItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("MovieListId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("MovieListId", "MovieId")
                        .IsUnique();

                    b.ToTable("MovieListItems");
                });

            modelBuilder.Entity("WatchList.Entity.Entites.Series", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentEpisode")
                        .HasColumnType("int");

                    b.Property<int>("CurrentSeason")
                        .HasColumnType("int");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPlannedToWatch")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PosterUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("WatchList.Entity.Entites.SeriesList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsShared")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SeriesLists");
                });

            modelBuilder.Entity("WatchList.Entity.Entites.SeriesListItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.Property<int>("SeriesListId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeriesId");

                    b.HasIndex("SeriesListId", "SeriesId")
                        .IsUnique();

                    b.ToTable("SeriesListItems");
                });

            modelBuilder.Entity("WatchList.Entity.Entites.TierList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsShared")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TierLists");
                });

            modelBuilder.Entity("WatchList.Entity.Entites.TierListItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TierListId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TierListId");

                    b.ToTable("TierListItems");
                });

            modelBuilder.Entity("WatchList.Entity.Entites.Like", b =>
                {
                    b.HasOne("WatchList.Entity.Entites.MovieList", null)
                        .WithMany("Likes")
                        .HasForeignKey("MovieListId");

                    b.HasOne("WatchList.Entity.Entites.SeriesList", null)
                        .WithMany("Likes")
                        .HasForeignKey("SeriesListId");

                    b.HasOne("WatchList.Entity.Entites.TierList", null)
                        .WithMany("Likes")
                        .HasForeignKey("TierListId");
                });

            modelBuilder.Entity("WatchList.Entity.Entites.MovieListItem", b =>
                {
                    b.HasOne("WatchList.Entity.Entites.Movie", "Movie")
                        .WithMany("MovieListItems")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WatchList.Entity.Entites.MovieList", "MovieList")
                        .WithMany("Movies")
                        .HasForeignKey("MovieListId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("MovieList");
                });

            modelBuilder.Entity("WatchList.Entity.Entites.SeriesListItem", b =>
                {
                    b.HasOne("WatchList.Entity.Entites.Series", "Series")
                        .WithMany("SeriesListItems")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WatchList.Entity.Entites.SeriesList", "SeriesList")
                        .WithMany("Series")
                        .HasForeignKey("SeriesListId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Series");

                    b.Navigation("SeriesList");
                });

            modelBuilder.Entity("WatchList.Entity.Entites.TierListItem", b =>
                {
                    b.HasOne("WatchList.Entity.Entites.TierList", "TierList")
                        .WithMany("Items")
                        .HasForeignKey("TierListId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TierList");
                });

            modelBuilder.Entity("WatchList.Entity.Entites.Movie", b =>
                {
                    b.Navigation("MovieListItems");
                });

            modelBuilder.Entity("WatchList.Entity.Entites.MovieList", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("Movies");
                });

            modelBuilder.Entity("WatchList.Entity.Entites.Series", b =>
                {
                    b.Navigation("SeriesListItems");
                });

            modelBuilder.Entity("WatchList.Entity.Entites.SeriesList", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("WatchList.Entity.Entites.TierList", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Likes");
                });
#pragma warning restore 612, 618
        }
    }
}
